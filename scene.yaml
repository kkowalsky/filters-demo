cameras:
    camera1:
        type: perspective
        vanishing_point: [-.25, -.75]
    camera2:
        type: isometric
        axis: [.0, 1.]
        active: true

lights:
    light1:
        type: directional
        diffuse: 1
        ambient: .35

sources:
    osm:
        type: TopoJSONTiles
        url:  //vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-HqUVidw

styles:
    buildings:
        base: polygons
        shaders:
            uniforms:
                u_height: 0 # height multiplier
                u_color_height: 0 # height cutoff
            blocks:
                position: position.z *= u_height;
                color: if (v_world_position.z < u_color_height) discard; # simple filter
    # use text color to filter labels if shader-filter-labels layer is shown
    building-labels:
        base: text
        shaders:
            uniforms:
                u_color_height: 0
            blocks:
                color: |
                    if (color.r < u_color_height/255.) discard;
                    else color.rgb = vec3(1.);

layers:
    earth:
        data: { source: osm }
        draw:
            polygons:
                order: 0
                color: [.5, .5, .5]

    landuse:
        data: { source: osm }
        draw:
            polygons:
                order: 1
                color: [.6, .6, .6]

    water:
        data: { source: osm }
        draw:
            polygons:
                order: 2
                color: [.4, .4, .4]

    roads:
        data: { source: osm }
        properties: { width: 3 }
        draw:
            lines:
                order: 2
                color: [1, 1, 1]
                width: 3

    buildings:
        data: { source: osm }

        properties:
            min_height: 5
            filter_text: ""
        filter: |
            function () {
                return (feature.height > properties.min_height) && feature.name && feature.name.toLowerCase().indexOf(properties.filter_text.toLowerCase().trim()) > -1;
            }
        draw:
            polygons:
                order: 4
                style: buildings
                color: red
                extrude: true
            # text: # this layer does not respond to the shader filter, and looks better
            #     order: 4
            #     text_source: name
            #     font:
            #         typeface: bold 10pt Lucida Grande
            #         fill: white
            #         stroke: { color: black, width: 4 }
            shader-filter-labels: # this layer responds to the shader filter
                order: 4
                style: building-labels
                text_source: name
                # text_source: function() {if (feature.height > properties.min_height) {return feature.name}; }
                font:
                    typeface: bold 10pt Lucida Grande
                    fill: |
                        function() {
                            var a = feature.height/255.;
                            return [a, 0., 0.];
                        }
